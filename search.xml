<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[在文档库中创建链接文件]]></title>
      <url>http://blog.sharepoint.store/2016/11/01/Create-LinkFile-In-Document-Library/</url>
      <content type="text"><![CDATA[概况 阅读时间：约5分钟 适用版本：SharePoint Server 2010及以上 面向用户：普通用户 难度指数：★★☆☆☆ 在SharePoint文档库中是否会遇到这种情况：在查看A文件夹下的文档后需要查看B文件夹下的文档，一般的做法是回到首页或上一级找到B文件夹再访问，繁琐在文件夹层级较深时操作更为繁琐。 那么有没有一种方式能够像在电脑资源管理器中那样可以建立一个快捷方式，点击即访问呢？答案是肯定的，可以在文档库中新建一个链接文件，创建完成后就像普通的文件一样显示，点击该文件及跳转到链接所指向的地址。看看是如何创建的吧。​ 启用内容管理在文档库库设置→高级设置，是否允许内容类型？下选择是，点击确定保存。 添加“文档链接内容类型”回到库设置界面，点击从现有网站内容类型添加，在打开的添加内容类型面，选择文档内容类型，在可用网站内容类型中选择文档链接，点击添加按钮添加到要添加的内容类型中，点击确定保存。 ​ 新建链接新建链接和新建其他普通文件类似，在文档库​文件选项卡下点击新建文件下的箭头，在显示的菜单中点击文件链接，将打开“新建指向文档的链接”页面，输入链接的显示名称和URL后点击确定按钮保存，在跳转新的页面直接点击保存按钮即创建成功. 点击该链接，即跳转到链接所指向的位置，聪明的你应该也发现了，该链接不仅可以指向文件夹或文件，也可以指向第三方系统、文件共享目录​等等。s 以上演示环境 SharePoint Server 2013 已测试生效版本 SharePoint Server 2010 SharePoint Server 2013 SharePoint Online]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[创建可自定义属性的文件夹]]></title>
      <url>http://blog.sharepoint.store/2016/10/29/Create-a-folder-with-custom-roperties/</url>
      <content type="text"><![CDATA[概况 阅读时间：约5分钟 适用版本：SharePoint Server 2010及以上 面向用户：普通用户、管理员、开发人员 难度指数：★★★☆☆ SharePoint中的文件夹分为2种，一种是文档库中的文件夹，一种是普通列表中的文件夹,但都只有一个属性，名称属性。 文档库文件夹 列表文件夹- 文件夹的属性可以用来做什么呢？比如解决文件夹排序的问题，给文件夹添加一个排序字段，这样再也不用在文件夹名称前加数字来排序了；对开发人员来说可以使用文件夹存储一些层级性较强的数据，比如导航菜单;另外，在文件夹较多的时候也可以通过自定义属性来分类\分组\筛选等。 下面看看如何实现吧。 创建网站内容类型打开网站设置，选择Web设计器库下的网站内容类型。 点击左上角的创建按钮，新建网站内容类型。 在新建网站内容类型表单中，父级内容类型选择文件夹内容类型下的文件夹，点击确定保存。 保存后进入所创建网站内容类型的管理界面。 点击从新网站栏添加，创建Order排序字段(下文中的字段、属性、栏均是同一个东东)。 保存后，需要的网站内容类型即创建完成了。 使用网站内容类型允许管理内容类型打开列表设置,选择高级设置，勾选是允许管理内容类型。 添加内容类型打开列表设置，在内容类型设置区域点击从现有网站内容类型添加。 在添加内容类型页选择前面所创建的MyFolder内容类型，添加后保存。 回到列表设置页后，已经可以看到有一些变化了。 创建带属性的文件夹选择Ribbon功能区的项目选项卡，在新建项目下拉菜单下多出来一个我们所创建的内容类型MyFolder菜单，点击即可创建该类型的文件夹。 修改自定义内容类型这个时候我们所创建的MyFolder内容类型,只有名称和Order字段，怎样添加URL、Target现有的其他字段呢？ 回到列表设置页面，在内容类型设置区域，点击需要修改的内容类型MyFolder，进入列表内容类型设置页面，选择从现有网站或列表栏添加。 在列表内容类型-添加栏页，可添加列表中包含的字段，也可添加网站中默认的网站栏，确定保存后即可看到新建MyFolder内容类型的文件夹时可设置的属性增加。 需要提醒的是，我们虽然在MyFolder内容类型上添加了Order字段，但在创建默认类型的文件夹和数据项时仍然不会有该字段存在，因为他们所属的内容类型不一致。应该可以想到同上面添加MyFolder内容类型的字段一样，我们只需要在默认类型的文件夹和数据项所属的内容类型项目上添加需要的字段即可。 以上演示环境 SharePoint Server 2013 已测试生效版本 SharePoint Server 2010 SharePoint Server 2013 SharePoint Online]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[切换用户登录]]></title>
      <url>http://blog.sharepoint.store/2016/10/28/%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</url>
      <content type="text"><![CDATA[概况 阅读时间：约1分钟 适用版本：SharePoint 2010及以上 面向用户：管理员、开发者 难度指数：★☆☆☆☆ 在SharePoint2010中，在用户名下的菜单中存在以其他用户身份登录菜单，从SharePoint 2013版本开始取消了这个菜单。 切换用户的2种方式在工作中难免会遇到需要切换用户的时候，下面介绍2种方式 以其他用户身份运行 在任务栏或开始菜单中找到IE图标，按下Shift键同时在IE图标上鼠标点击右键,选择以其他用户身份运行。 通过URL地址访问 http://SiteUrl/_layouts/closeConnection.aspx?loginasanotheruser=true SiteUrl为所要访问的SharePoint网站 一键切换 利用前面第二种方式实现一键切换。 通过鼠标拖放 切换用户 到书签栏。 打开SharePoint网站，点击浏览器书签上的切换用户，将弹出用户登录窗口，输入账号密码登陆即完成切换操作。 原理解释：点击切换用户书签，将在当前页面执行一段js代码，拼接为url地址并跳转到以其他用户身份登录页面。 代码如下： javascript:document.location.href=_spPageContextInfo.webAbsoluteUrl+ &quot;/_layouts/closeConnection.aspx?loginasanotheruser=true&amp;source=&quot;+ document.location.href 以上演示环境 SharePoint Server 2013 Chrome 54.0.2840.71 m 已测试生效版本 SharePoint Server 2010 SharePoint Online 参考资料： Sign in as Different User” menu option is missing in SharePoint Server 2013 How to Sign in as a Different User in SharePoint 2013]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[在Outlook查看SharePoint文档库中的文档]]></title>
      <url>http://blog.sharepoint.store/2016/10/25/%E5%90%8C%E6%AD%A5SharePoint%E4%B8%AD%E7%9A%84%E6%96%87%E6%A1%A3%E5%88%B0Outlook%E4%B8%AD%E6%9F%A5%E7%9C%8B/</url>
      <content type="text"><![CDATA[本文概况 阅读时间: 约2分钟 适用版本：SharePoint Server 2010及以上 面向用户：普通用户，管理员 难度指数：★★☆☆☆ 在日常工作中，总有一些常用的文档需要经常打开查看，其实我们可以使用Outlook连接SharePoint中的文档库，自动下载文档并将同其他邮件目录一起显示在导航区域，而且可以直接在Outlook中查看预览文档内容，就像查看邮件一样方便。 当有新文件上传或文件有更新，文件变动也将同步显示在Outlook中，也可以点击在Outlook中的文件夹直接跳转到浏览器中查看。 效果图 实现步骤打开任意文档库，在文档库根目录点击Ribbon功能区的库选项卡，点击上面连接到Outlook图标按钮 浏览器将弹出安全提示框是否允许浏览器打开此计算机上的程序，点击允许 浏览器启动Outlook后，会询问是否将此SharePoint 文档库-连接到Outlook，点击是即可 允许Outlook连接SharePoint后，会提示输入SharePoint账号密码登陆，这里的界面因SharePoint版本可能不一致，但没有关系，登陆验证即可 验证成功后，Outlook将同步下载所连接文档库的文档到本地 下载后的文件显示在SharePoint 列表栏目下，并与邮件一样会高亮显示未查看的条目，另外文档库中的文件夹层级结构也下载下来了，可以折叠展开显示。 文件预览选择一个文件，文件内容将在邮件预览区显示，支持Word、Excel、PPT直接预览，PDF需要安装与Outlook兼容的预览程序，也可以直接双击文件直接调用本机PDF默认打开程序预览。 通过邮件发送文件在已离线的文件上，点击右键，在显示的菜单中选择转发，将显示新建邮件窗口，可以看到文件已经在邮件的附件栏里了，即可输入收件人发送该文件， 在浏览器中打开在Outlook中查看文件比较方便，但如果需要查看文件的历史版本就需要在浏览器中操作了。我们可以直接在OutlookSharePoint 列表栏目下，在想要在浏览器中查看的文件夹上点击右键，选择在Web浏览器中打开,将自动在浏览器中跳转到SharePoint中所选文件夹目录。 如果在Web浏览器中打开后，提示404错误，请确认在点击连接到Outlook按钮时是否处于文档库根目录。 处理办法：回到浏览器，导航到所要连接到Outlook中的SharePoint文档库根目录，点击连接到Outlook按钮安装上面的步骤重新操作即刻，Outlook中先前已连接的库可以右键删除. 需要注意的是，这些离线到本地的文件属于只读文件，对文件的删除操作都不会保存到SharePoint文档库中。 将文件更改同步到服务器在Outlook同步的SharePoint文档库文件列表中，双击文档自动调用Office程序打开该文件，选择脱机编辑，将会把当前文件保存在导航栏SharePoint 草稿栏目中并进入编辑模式，修改完成后关闭保存。 在SharePoint 草稿中找到刚才编辑的文件，选中后可以在文档预览区看到提示只能在这台计算机上使用此文档的更改，请打开此文档以签入更改，根据提示双击打开文件，将提示是否尝试将您的脱机更改更新到服务器(会在Outlook检测到联机的情况下提示，否则不会提示),点击更新 文件将同步更新到SharePoint服务器，更新完成后可以看到所打开的文件状态又恢复成只读模式。 以上演示环境： SharePoint版本：SharePoint Online Outlook版本：Outlook 2016]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[服务器对象模型中赋值取值完全指南]]></title>
      <url>http://blog.sharepoint.store/2016/10/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E4%B8%AD%E8%B5%8B%E5%80%BC%E5%8F%96%E5%80%BC%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</url>
      <content type="text"><![CDATA[概况 阅读时间：约10分钟(通读) 适用版本：SharePoint Server 2010及以上 面向用户：开发者 难度指数：★★★☆☆ 本文演示了SharePoint在服务端对象模型中如何对列表各种字段类型赋值和取值操作。 方便演示创建了一个自定义列表，自定义列表包含多个字段，所有字段显示名称都被命名为基于它们所属字段类型的字段。例如，文本类型字段命名为textfield,如下图： 适用于下面展示的例子与测试，适用于以下版本的 SharePoint： SharePoint 2010 SharePoint 2013 初始化Demo数据获取列表中和一个 SPListItem这是得到SPListItem的基本代码。如果列表中包含至少一条数据，检索的第一项，否则创建新项目。12345var web = SPContext.Current.Site.RootWeb;var list = web.Lists.TryGetList("fieldslist");if (list == null) return;SPListItem item;item = list.ItemCount &gt; 0 ? list.Items[0] : list.Items.Add(); 创建示例中所使用的变量12345var t = DateTime.Now.ToLongTimeString();//StringBuilder for outputvar s = new StringBuilder();//Variable for storing temporary valuesString value; 赋值、取值示例设置和获取标题 赋值 1item["Title"] = String.Format("Title updated at &#123;0&#125;",t); 取值 12value = item["Title"].ToString();s.AppendLine(String.Format("&lt;span&gt;Title Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 设置和获取文本字段 赋值 12item["textfield"] = String.Format("At &#123;0&#125; dogs still can't write poems", t);item.Update(); 取值 12value = item["textfield"].ToString();s.AppendLine(String.Format("&lt;span&gt;Text Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 多行文本(或富文本)字段 赋值 12item["notefield"] = String.Format("At &#123;0&#125; dogs still can't write poems. \r\nBut then, neither can I!", t);item.Update(); 取值 12value = item["notefield"].ToString();s.AppendLine(String.Format("&lt;span&gt;Note Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 设置和获取Yes/No 字段(布尔值) 赋值 12item["yesnofield"] = false;item.Update(); 取值 12value = item["yesnofield"].ToString();s.AppendLine(String.Format("&lt;span&gt;Yes/No Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 设置和获取数字字段 赋值 1234item["numberfield"] = 35;//Oritem["numberfield"] = Double.Parse("354.67");item.Update(); 取值 123456value = item["numberfield"].ToString();s.AppendLine(String.Format("&lt;span&gt;Number Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value));value = Double.Parse(item["numberfield"].ToString()).ToString("F1");s.AppendLine(String.Format("&lt;span&gt;Number Field (one decimal place): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value));value = Double.Parse(item["numberfield"].ToString()).ToString("F0");s.AppendLine(String.Format("&lt;span&gt;Number Field (two decimal places): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 设置和获取货币字段货币字段使用字段类型相同的 SharePoint 作为数 （SPFieldNumber）。数字字段的类型是double。您可以使用标准数字格式指定要设置格式的数字显示，具体地说，格式化为一种货币。请参阅Double.ToString的详细信息。 赋值 12item["currencyfield"] = Double.Parse("354.67");item.Update(); 取值 123456value = item["currencyfield"].ToString();s.AppendLine(String.Format("&lt;span&gt;Currency Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value));value = Double.Parse(item["currencyfield"].ToString()).ToString("C2");s.AppendLine(String.Format("&lt;span&gt;Currency Field (formatted as a currency): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value));value = (Double.Parse(item["numberfield"].ToString()) + 123).ToString("C2");s.AppendLine(String.Format("&lt;span&gt;Currency Field (addition): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 设置和获取百分百的字段百分比字段使用字段类型相同的 SharePoint 作为数 （SPFieldNumber）。数字字段的类型是double。您可以使用标准数字格式指定要设置格式的数字显示，具体地说，格式为百分比。请参阅Double.ToString的详细信息。 赋值 12item["percentfield"] = Double.Parse("0.8735");item.Update(); 取值 123456value = item["percentfield"].ToString();s.AppendLine(String.Format("&lt;span&gt;Percent Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value));value = Double.Parse(item["percentfield"].ToString()).ToString("P0");s.AppendLine(String.Format("&lt;span&gt;Percent Field (formatted as a percent, and as a whole number): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value));value = Double.Parse(item["percentfield"].ToString()).ToString("P2");s.AppendLine(String.Format("&lt;span&gt;Percent Field (formatted as a percent, with two decimal places): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 设置和获取日期字段若要设置一个日期字段，使用 System.DateTime 对象创建一个日期，然后将 DateTime 对象分配给列表项的字段。当您检索日期时间字段的值时，可以使用标准日期格式说明符来设置格式的值的输出。请参阅DateTime.ToString的详细信息。 赋值1234item["datefield"] = DateTime.Now;//Or, set the date to Now + two daysitem["datefield"] = DateTime.Now.AddDays(2);item.Update(); 取值1234567891011value = item["datefield"].ToString();s.AppendLine(String.Format("&lt;span&gt;Date Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value));value = DateTime.Parse(item["datefield"].ToString()).ToString("d");s.AppendLine(String.Format("&lt;span&gt;Date Field (using the \"6/15/2008\" format): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value));value = DateTime.Parse(item["datefield"].ToString()).ToString("D");s.AppendLine(String.Format("&lt;span&gt;Date Field (using the \"Sunday, June 15, 2008\" format): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value));value = DateTime.Parse(item["datefield"].ToString()).ToString("R");s.AppendLine(String.Format("&lt;span&gt;Date Field (using the \"Sun, 15 Jun 2008 21:15:07 GMT\" format): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value));var dateValue = DateTime.Parse(item["datefield"].ToString());value = dateValue.AddDays(13).ToString("dd-MMM-yy");s.AppendLine(String.Format("&lt;span&gt;Date Field (using a custom display format): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 设置和获取单择字段单选赋值12345var choicevalues = new SPFieldMultiChoiceValue();choicevalues.Add("Green");choicevalues.Add("Blue");item["multiplechoicefield"] = choicevalues;item.Update(); 单选取值12value = item["choicefield"].ToString();s.AppendLine(String.Format("&lt;span&gt;Choice Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 设置和获取多选择字段多选取值1234567list.Fields["multiplechoicefield"].ParseAndSetValue(item, choicevalues.ToString());var multipleChoiceValues = new SPFieldMultiChoiceValue(item["multiplechoicefield"].ToString());s.AppendLine(String.Format("&lt;span&gt;Multiple Choice Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", multipleChoiceValues));for(int i = 0; i &lt;= multipleChoiceValues.Count - 1; i++)&#123; s.AppendLine(String.Format("&lt;span&gt;Multiple Choice Field, value &#123;0&#125;: &#123;1&#125;&lt;/span&gt;&lt;/br&gt;", i, multipleChoiceValues[i]));&#125; 多选赋值12345var choicevalues = new SPFieldMultiChoiceValue();choicevalues.Add("Green");choicevalues.Add("Blue");item["multiplechoicefield"] = choicevalues;item.Update(); 设置和获取单用户字段字段单用户取值1234value = item["personfield"].ToString();s.AppendLine(String.Format("&lt;span&gt;Person Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value));var userFieldValue = new SPFieldUserValue(web, item["personfield"].ToString());s.AppendLine(String.Format("&lt;span&gt;Person Field: Name = &#123;0&#125;, Email = &#123;1&#125;&lt;/span&gt;&lt;/br&gt;", userFieldValue.User.Name, userFieldValue.User.Email)); 单用户赋值1234item["personfield"] = web.EnsureUser("contoso\\fred");//oritem["personfield"] = web.EnsureUser("fred@contoso.com");item.Update(); 设置和获取多用户字段多用户取值12345678var fieldUserValueCollection = new SPFieldUserValueCollection(web, item["lotsofpeoplefield"].ToString());s.AppendLine(String.Format("&lt;span&gt;MultiPerson Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", fieldUserValueCollection));var userCount = 1;foreach(SPFieldUserValue v in fieldUserValueCollection)&#123; s.AppendLine(String.Format("&lt;span&gt;MultiPerson Field, value &#123;0&#125;: &#123;1&#125;&lt;/span&gt;&lt;/br&gt;", userCount, v.User.Name)); userCount++;&#125; 多用户赋值123456789var lotsofpeople = new SPFieldUserValueCollection(web, item["lotsofpeoplefield"].ToString());var personA = web.EnsureUser("contoso\\fred");var personAValue = new SPFieldUserValue(web, personA.ID, personA.LoginName);var personB = web.EnsureUser("contoso\\barnie");var personBValue = new SPFieldUserValue(web, personB.ID, personB.LoginName);lotsofpeople.Add(personAValue);lotsofpeople.Add(personBValue);item["lotsofpeoplefield"] = lotsofpeople;item.Update(); 设置和获取查阅字段赋值12345678910var lookupField = list.Fields["lookupfield"] as SPFieldLookup;var lookupList = web.Lists[new Guid(lookupField.LookupList)];var lookupitem = lookupList.Items[0];//-or-//lookupitem = lookupList.GetItemByUniqueId(new Guid("fc71b84c-74d4-4f7c-9eed-fb7a5fbe24a6"));//-or-//lookupitem = lookupList.GetItemById(1);var lookupValue = new SPFieldLookupValue(lookupitem.ID, lookupitem.ID.ToString());item["lookupfield"] = lookupValue;item.Update(); 取值123var lookupItemValue = new SPFieldLookupValue(item["lookupfield"].ToString());value = lookupItemValue.LookupValue;s.AppendLine(String.Format("&lt;span&gt;Lookup Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 设置和获取超链接字段赋值1234567891011var hyperlinkField = list.Fields["hyperlinkfield"] as SPFieldUrl;var urlFieldValue = new SPFieldUrlValue();urlFieldValue.Description = "Microsoft";urlFieldValue.Url = "http://www.microsoft.com ";//SharePoint 2013 OnlyhyperlinkField.ValidateParseAndSetValue(item, urlFieldValue.ToString());//SharePoint 2010 and SharePoint 2013hyperlinkField.ParseAndSetValue(item, urlFieldValue.ToString());item.Update(); 取值123var hyperlinkFieldValue = new SPFieldUrlValue(item["hyperlinkfield"].ToString());value = String.Format("&lt;a href=\"&#123;1&#125;\" alt=\"&#123;0&#125;\"&gt;&#123;0&#125;&lt;/a&gt;", hyperlinkFieldValue.Description, hyperlinkFieldValue.Url);s.AppendLine(String.Format("&lt;span&gt;Hyperlink Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 设置和获取托管的元数据字段赋值1234567891011121314151617181920var managedMetaDataField = list.Fields["managedmetadatafield"] as TaxonomyField;var termsetId = managedMetaDataField.TermSetId;var termstoreId = managedMetaDataField.SspId;var taxonomySession = new TaxonomySession(web.Site);var termstore = taxonomySession.TermStores[termstoreId];var termset = termstore.GetTermSet(termsetId);var termname = "Rubbish Tip";var terms = termset.GetTerms(termname, false);Term term;if(terms.Count == 0)&#123; term = termset.CreateTerm(termname, termstore.Languages[0]); termstore.CommitAll();&#125;else&#123; term = terms[0];&#125;managedMetaDataField.SetFieldValue(item, term);item.Update(); 取值12var taxonomyFieldValue = item["managedmetadatafield"] as TaxonomyFieldValue;s.AppendLine(String.Format("&lt;span&gt;Taxonomy Field: &#123;0&#125; (&#123;1&#125;)&lt;/span&gt;&lt;/br&gt;", taxonomyFieldValue.Label, taxonomyFieldValue.TermGuid)); 设置和获取值的多个托管元数据字段多值的托管元数据字段赋值123456789101112131415161718192021222324252627282930var managedMetaDataField = list.Fields["managedmetadatafield"] as TaxonomyField;var termsetId = managedMetaDataField.TermSetId;var termstoreId = managedMetaDataField.SspId;var taxonomySession = new TaxonomySession(web.Site);var termstore = taxonomySession.TermStores[termstoreId];var termset = termstore.GetTermSet(termsetId);var multipleManagedMetaDataField = list.Fields["multiplemanagedmetadatafield"] as TaxonomyField;var termCollection = new TaxonomyFieldValueCollection(multipleManagedMetaDataField);var taxonomyLabels = new[] &#123;"Frog Catcher", , "Giraffe Stealer" "Moon Dog"&#125;;Term term;foreach(var label in taxonomyLabels)&#123; var terms = termset.GetTerms(label, false); term = null; if(terms.Count == 0) &#123; term = termset.CreateTerm(label, termstore.Languages[0]); termstore.CommitAll(); &#125; else &#123; term = terms[0]; &#125; var termValue = new TaxonomyFieldValue(multipleManagedMetaDataField); termValue.TermGuid = term.Id.ToString(); termValue.Label = term.Name; termCollection.Add(termValue);&#125;multipleManagedMetaDataField.SetFieldValue(item, termCollection);item.Update(); 多值的托管元数据字段取值123456789101112var taxonomyFieldValueCollection = item["multiplemanagedmetadatafield"] as TaxonomyFieldValueCollection;value = String.Empty;foreach(var taxonomyValue in taxonomyFieldValueCollection)&#123; value = String.IsNullOrEmpty(value) ? String.Format("&#123;0&#125; (&#123;1&#125;)", taxonomyValue.Label, taxonomyValue.TermGuid) : String.Format("&#123;0&#125;, &#123;1&#125; (&#123;2&#125;)", value, taxonomyValue.Label, taxonomyValue.TermGuid); //Or, to use get the term var currentTerm = termstore.GetTerm(new Guid(taxonomyValue.TermGuid)); //do something with the term&#125;s.AppendLine(String.Format("&lt;span&gt;Multiple Taxonomy Field Values: &#123;0&#125;)&lt;/span&gt;&lt;/br&gt;", value)); 设置和获取计算的字段 赋值 计算字段的值是在创建或更新列表项时计算的。它是不可能直接设置此值。可以使用以下方法来设置公式，用以计算字段值。在这些方法之前，有四个主要的属性，可以设置在计算的字段 ；公式、 输出类型、 DisplayFormat 和简写。您需要设置，哪些属性取决于计算值。 公式： 用来计算值的公式。输出类型： 从计算结果值的类型。受支持的类型，文本、 数字、 整数、 货币、 boolean 类型的值和日期时间。DisplayFormat： 提供号码、 整数和货币用于指定的小数位数简写： 与日期时间用于指定日期或日期和时间。在以下示例中，我们执行以下任务： 查看当前的公式 查看当前的显示格式 从两位小数的显示格式更改为四位小数 从货币的输出类型更改为整数 更改公式、 输出类型并设置日期格式 12345678910111213141516171819//Configuring the calculated fields.AppendLine(String.Format("&lt;span&gt;Calculated Field Formula: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", calculatedfield.Formula));s.AppendLine(String.Format("&lt;span&gt;Calculated Display Format: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", calculatedfield.DisplayFormat));s.AppendLine(String.Format("&lt;span&gt;Calculated Output Type: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", calculatedfield.OutputType));calculatedfield.DisplayFormat = SPNumberFormatTypes.FourDecimals;calculatedfield.Update();item.Update();s.AppendLine(String.Format("&lt;span&gt;Calculated Field (Display Format 4 decimals): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", calculatedfield.GetFieldValueAsText(item["calculatedfield"])));calculatedfield.OutputType = SPFieldType.Integer;calculatedfield.Update();item.Update();s.AppendLine(String.Format("&lt;span&gt;Calculated Field (Output Type Integer): &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", calculatedfield.GetFieldValueAsText(item["calculatedfield"])));calculatedfield.Formula = "=[datefield]+90";calculatedfield.DateFormat = SPDateTimeFieldFormatType.DateOnly;calculatedfield.OutputType = SPFieldType.DateTime;calculatedfield.Update();item.Update();s.AppendLine(String.Format("&lt;span&gt;Calculated Field (Updated Formula, Date Format and Output Type):&#123;0&#125;&lt;/span&gt;&lt;/br&gt;", calculatedfield.GetFieldValueAsText(item["calculatedfield"]))); 取值 计算的字段的工作方式不同于正常的领域。在列表字段，建立计算公式和时添加或更新列表项，为该列表项的列的值根据计算公式。获取一个值，计算字段获取计算的字段的引用。然后获取列表项的引用。最后，调用 GetFieldValueAsText 方法，通过在项目对象计算字段的值。 12345var calculatedfield = list.Fields["calculatedfield"] as SPFieldCalculated;value = calculatedfield.GetFieldValueAsText(item["calculatedfield"]);s.AppendLine(String.Format("&lt;span&gt;Calculated Field: &#123;0&#125;&lt;/span&gt;&lt;/br&gt;", value)); 参考资料SPField SPFieldText SPFieldMultiLineText(Note) SPFieldBoolean SPFieldCalculated SPFieldChoice SPFieldCurrency SPFieldDateTime SPFieldLookup SPFieldMultiChoice SPFieldMultiChoiceValue SPFieldNumber SPFieldUrl SPFieldUrlValue SPFieldUserValue SPFieldUserValueCollection TaxonomyField TaxonomyFieldValue.aspx) TaxonomyFieldValueCollection.aspx)SPNumberFormatTypes SPFieldType SPDateTimeFieldFormatType 原文链接(需梯子):http://matthewyarlett.blogspot.com.au/2013/12/a-quick-guide-to-getting-and-setting.html)]]></content>
    </entry>

    
  
  
</search>
